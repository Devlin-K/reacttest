{"ast":null,"code":"var _jsxFileName = \"W:\\\\Study\\\\BlogReactUI\\\\reactblogproject\\\\src\\\\login\\\\regist.js\";\nimport React from 'react';\nimport { Form, Input, Button, Icon, message } from 'antd';\nimport { connect } from 'react-redux';\nimport { getlogin, getlogout, getuser } from '../store/action';\nimport axios from 'axios';\nconst valiurl = '/api/validateuser';\nconst registurl = '/api/doregist';\n\nclass Register extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          let sendobj = {\n            'username': values.email,\n            'password': values.password,\n            'nickname': values.nickname\n          };\n          axios({\n            url: registurl,\n            method: 'post',\n            data: sendobj\n          }).then(res => {\n            let data = res.data;\n\n            if (data === 'success') {\n              message.success(\"注册成功!\");\n              setTimeout(() => {\n                this.props.history.push('/login/accountlogin');\n              }, 1000);\n            }\n\n            if (data === 'failed') {\n              message.error(\"注册失败!\");\n            }\n\n            if (data === 'userduplicate') {\n              message.error(\"已存在用户名!\");\n            }\n          });\n        }\n      });\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('两次密码输入不一致');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    this.validfunc = (rule, value, callback) => {\n      const sendobj = {\n        username: value\n      };\n      axios({\n        url: valiurl,\n        method: 'post',\n        data: sendobj\n      }).then(res => {\n        let data = res.data;\n\n        if (data === 'duplicate') {\n          callback(\"此用户名已注册\");\n        } else {\n          callback();\n        }\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    return React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      validateTrigger: 'onBlur',\n      rules: [{\n        type: 'email',\n        message: '请输入邮箱格式'\n      }, {\n        required: true,\n        message: '请输入邮箱'\n      }, {\n        validator: this.validfunc\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"mail\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }),\n      placeholder: \"\\u8BF7\\u8F93\\u5165\\u90AE\\u7BB1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, getFieldDecorator('nickname', {\n      rules: [{\n        required: true,\n        message: '请输入昵称'\n      }, {\n        max: 20,\n        message: \"最多20字符\"\n      }, {\n        min: 1,\n        message: \"最少1字符\"\n      }]\n    })(React.createElement(Input, {\n      prefix: React.createElement(Icon, {\n        type: \"user\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }),\n      placeholder: \"\\u8BF7\\u8F93\\u5165\\u6635\\u79F0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: '请输入密码'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }),\n      placeholder: \"\\u8BF7\\u8F93\\u5165\\u5BC6\\u7801\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: '请确认密码'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      prefix: React.createElement(Icon, {\n        type: \"lock\",\n        style: {\n          color: 'rgba(0,0,0,.25)'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }),\n      placeholder: \"\\u8BF7\\u786E\\u8BA4\\u5BC6\\u7801\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"\\u6CE8\\u518C\")));\n  }\n\n}\n\nconst RegisterForm = Form.create({\n  name: 'register'\n})(Register);\nexport default connect((state, props) => Object.assign({}, props, state), {\n  getlogin,\n  getlogout,\n  getuser\n})(RegisterForm);","map":{"version":3,"sources":["W:\\Study\\BlogReactUI\\reactblogproject\\src\\login\\regist.js"],"names":["React","Form","Input","Button","Icon","message","connect","getlogin","getlogout","getuser","axios","valiurl","registurl","Register","Component","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","sendobj","email","password","nickname","url","method","data","then","res","success","setTimeout","history","push","error","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","validfunc","username","render","getFieldDecorator","validateTrigger","rules","type","required","validator","color","max","min","width","RegisterForm","create","name","Object","assign"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Form,Input,Button,Icon,message} from 'antd';\r\nimport {connect} from 'react-redux';\r\nimport {getlogin,getlogout,getuser} from '../store/action'\r\nimport axios from 'axios'\r\n\r\nconst valiurl='/api/validateuser';\r\nconst registurl='/api/doregist';\r\n\r\nclass Register extends React.Component{\r\n    state = {\r\n      confirmDirty: false,\r\n      autoCompleteResult: [],\r\n    };\r\n    handleSubmit = e => {\r\n      e.preventDefault();\r\n      this.props.form.validateFieldsAndScroll((err, values) => {\r\n        if (!err) {   \r\n          let sendobj={'username':values.email,'password':values.password,'nickname':values.nickname};\r\n          axios({\r\n            url:registurl,\r\n            method:'post',\r\n            data:sendobj\r\n          }).then((res)=>{  \r\n            let data=res.data;    \r\n            if(data==='success'){\r\n              message.success(\"注册成功!\");\r\n              setTimeout(()=>{this.props.history.push('/login/accountlogin')},1000);\r\n            }\r\n            if(data==='failed'){\r\n              message.error(\"注册失败!\");\r\n            }\r\n            if(data==='userduplicate'){\r\n              message.error(\"已存在用户名!\");\r\n            }\r\n          })       \r\n        }\r\n      });\r\n    };\r\n    handleConfirmBlur=(e)=>{\r\n      const value = e.target.value;\r\n      this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n    };\r\n    compareToFirstPassword = (rule,value,callback)=>{\r\n      const form = this.props.form;\r\n      if (value && value !== form.getFieldValue('password')) {\r\n        callback('两次密码输入不一致');\r\n      }else{\r\n        callback();\r\n      }\r\n    };\r\n    validateToNextPassword = (rule, value, callback) => {\r\n      const form = this.props.form;\r\n      if (value && this.state.confirmDirty) {\r\n        form.validateFields(['confirm'], { force: true });\r\n      }\r\n      callback();\r\n    };\r\n    validfunc=(rule,value,callback)=>{   \r\n      const sendobj={username:value};\r\n      axios({\r\n        url:valiurl,\r\n        method:'post',\r\n        data:sendobj\r\n      }).then((res)=>{\r\n        let data=res.data;\r\n        if(data==='duplicate'){\r\n          callback(\"此用户名已注册\")\r\n        }else{\r\n          callback()\r\n        }\r\n      })\r\n    } \r\n    render() {\r\n      const { getFieldDecorator } = this.props.form;\r\n      return (\r\n        <Form  onSubmit={this.handleSubmit}>\r\n          <Form.Item >\r\n            {getFieldDecorator('email', {\r\n              validateTrigger:'onBlur',\r\n              rules: [\r\n                {\r\n                  type: 'email',\r\n                  message: '请输入邮箱格式',\r\n                },\r\n                {\r\n                  required: true,\r\n                  message: '请输入邮箱',\r\n                },\r\n                {\r\n                  validator:this.validfunc\r\n                },\r\n              ],\r\n            })(<Input  prefix={<Icon type=\"mail\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"请输入邮箱\"/>)}\r\n          </Form.Item>\r\n          <Form.Item>\r\n            {getFieldDecorator('nickname', {\r\n              rules: [{ required: true, message: '请输入昵称' },{max:20,message:\"最多20字符\"},{min:1,message:\"最少1字符\"}],\r\n            })(<Input prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"请输入昵称\" />,)}\r\n          </Form.Item>\r\n          <Form.Item >\r\n            {getFieldDecorator('password', {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: '请输入密码',\r\n                },\r\n                {\r\n                  validator: this.validateToNextPassword,\r\n                },\r\n              ],\r\n            })(<Input.Password prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />} placeholder=\"请输入密码\" />)}\r\n          </Form.Item>\r\n          <Form.Item >\r\n            {getFieldDecorator('confirm', {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: '请确认密码',\r\n                },\r\n                {\r\n                  validator: this.compareToFirstPassword,\r\n                },\r\n              ],\r\n            })(<Input.Password onBlur={this.handleConfirmBlur} prefix={<Icon type=\"lock\" style={{color:'rgba(0,0,0,.25)'}} />} placeholder=\"请确认密码\" />)}\r\n          </Form.Item>         \r\n          <Form.Item >\r\n            <Button type=\"primary\" htmlType=\"submit\" style={{width:'100%'}}>\r\n              注册\r\n            </Button>\r\n          </Form.Item>\r\n        </Form>\r\n      );\r\n    }\r\n}\r\n    \r\nconst RegisterForm = Form.create({ name: 'register' })(Register);\r\n\r\nexport default connect((state,props)=>(Object.assign({},props,state)),{getlogin,getlogout,getuser} )(RegisterForm)"]},"metadata":{},"sourceType":"module"}